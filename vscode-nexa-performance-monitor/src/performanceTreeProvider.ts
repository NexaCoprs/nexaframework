import * as vscode from 'vscode';
import { PerformanceMonitor, PerformanceMetrics } from './performanceMonitor';

export class PerformanceTreeProvider implements vscode.TreeDataProvider<PerformanceItem> {
    private _onDidChangeTreeData: vscode.EventEmitter<PerformanceItem | undefined | null | void> = new vscode.EventEmitter<PerformanceItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<PerformanceItem | undefined | null | void> = this._onDidChangeTreeData.event;

    constructor(
        private context: vscode.ExtensionContext,
        private performanceMonitor: PerformanceMonitor
    ) {}

    refresh(): void {
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element: PerformanceItem): vscode.TreeItem {
        return element;
    }

    async getChildren(element?: PerformanceItem): Promise<PerformanceItem[]> {
        if (!element) {
            return this.getRootItems();
        }

        switch (element.contextValue) {
            case 'monitoring':
                return this.getMonitoringItems();
            case 'metrics':
                return this.getMetricsItems();
            case 'alerts':
                return this.getAlertsItems();
            case 'reports':
                return this.getReportsItems();
            default:
                return [];
        }
    }

    private getRootItems(): PerformanceItem[] {
        const isMonitoring = this.performanceMonitor.isCurrentlyMonitoring();
        const monitoringIcon = isMonitoring ? 'pulse' : 'debug-stop';
        const monitoringLabel = isMonitoring ? 'Monitoring actif' : 'Monitoring arr√™t√©';
        
        return [
            new PerformanceItem(
                monitoringLabel,
                vscode.TreeItemCollapsibleState.Expanded,
                'monitoring',
                new vscode.ThemeIcon(monitoringIcon),
                isMonitoring ? 'Monitoring en cours...' : 'Cliquez pour d√©marrer'
            ),
            new PerformanceItem(
                'M√©triques',
                vscode.TreeItemCollapsibleState.Collapsed,
                'metrics',
                new vscode.ThemeIcon('graph'),
                'M√©triques de performance'
            ),
            new PerformanceItem(
                'Alertes',
                vscode.TreeItemCollapsibleState.Collapsed,
                'alerts',
                new vscode.ThemeIcon('warning'),
                'Alertes de performance'
            ),
            new PerformanceItem(
                'Rapports',
                vscode.TreeItemCollapsibleState.Collapsed,
                'reports',
                new vscode.ThemeIcon('file-text'),
                'Rapports d\'analyse'
            )
        ];
    }

    private getMonitoringItems(): PerformanceItem[] {
        const isMonitoring = this.performanceMonitor.isCurrentlyMonitoring();
        const latestMetrics = this.performanceMonitor.getLatestMetrics();
        
        const items: PerformanceItem[] = [];
        
        if (isMonitoring) {
            items.push(
                new PerformanceItem(
                    'Arr√™ter le monitoring',
                    vscode.TreeItemCollapsibleState.None,
                    'stopMonitoring',
                    new vscode.ThemeIcon('debug-stop'),
                    'Arr√™ter la surveillance'
                )
            );
        } else {
            items.push(
                new PerformanceItem(
                    'D√©marrer le monitoring',
                    vscode.TreeItemCollapsibleState.None,
                    'startMonitoring',
                    new vscode.ThemeIcon('play'),
                    'D√©marrer la surveillance'
                )
            );
        }
        
        if (latestMetrics) {
            items.push(
                new PerformanceItem(
                    `CPU: ${latestMetrics.cpuUsage}%`,
                    vscode.TreeItemCollapsibleState.None,
                    'metric',
                    new vscode.ThemeIcon('cpu'),
                    `Utilisation CPU: ${latestMetrics.cpuUsage}%`
                ),
                new PerformanceItem(
                    `M√©moire: ${latestMetrics.memoryUsage}MB`,
                    vscode.TreeItemCollapsibleState.None,
                    'metric',
                    new vscode.ThemeIcon('database'),
                    `Utilisation m√©moire: ${latestMetrics.memoryUsage}MB`
                ),
                new PerformanceItem(
                    `Temps de r√©ponse: ${Math.round(latestMetrics.responseTime)}ms`,
                    vscode.TreeItemCollapsibleState.None,
                    'metric',
                    new vscode.ThemeIcon('clock'),
                    `Temps de r√©ponse moyen: ${Math.round(latestMetrics.responseTime)}ms`
                )
            );
        }
        
        return items;
    }

    private getMetricsItems(): PerformanceItem[] {
        const metrics = this.performanceMonitor.getMetrics();
        
        if (metrics.length === 0) {
            return [
                new PerformanceItem(
                    'Aucune m√©trique disponible',
                    vscode.TreeItemCollapsibleState.None,
                    'noData',
                    new vscode.ThemeIcon('info'),
                    'D√©marrez le monitoring pour collecter des m√©triques'
                )
            ];
        }
        
        const latest = metrics[metrics.length - 1];
        const items: PerformanceItem[] = [];
        
        // Summary metrics
        const avgMemory = metrics.reduce((sum, m) => sum + m.memoryUsage, 0) / metrics.length;
        const avgResponseTime = metrics.reduce((sum, m) => sum + m.responseTime, 0) / metrics.length;
        const maxMemory = Math.max(...metrics.map(m => m.memoryUsage));
        const maxResponseTime = Math.max(...metrics.map(m => m.responseTime));
        
        items.push(
            new PerformanceItem(
                `√âchantillons: ${metrics.length}`,
                vscode.TreeItemCollapsibleState.None,
                'summary',
                new vscode.ThemeIcon('list-ordered'),
                `${metrics.length} √©chantillons collect√©s`
            ),
            new PerformanceItem(
                `M√©moire moyenne: ${Math.round(avgMemory)}MB`,
                vscode.TreeItemCollapsibleState.None,
                'summary',
                new vscode.ThemeIcon('graph'),
                `Utilisation m√©moire moyenne: ${Math.round(avgMemory)}MB`
            ),
            new PerformanceItem(
                `M√©moire pic: ${maxMemory}MB`,
                vscode.TreeItemCollapsibleState.None,
                'summary',
                new vscode.ThemeIcon('arrow-up'),
                `Pic d'utilisation m√©moire: ${maxMemory}MB`
            ),
            new PerformanceItem(
                `Temps r√©ponse moyen: ${Math.round(avgResponseTime)}ms`,
                vscode.TreeItemCollapsibleState.None,
                'summary',
                new vscode.ThemeIcon('clock'),
                `Temps de r√©ponse moyen: ${Math.round(avgResponseTime)}ms`
            ),
            new PerformanceItem(
                `Temps r√©ponse max: ${Math.round(maxResponseTime)}ms`,
                vscode.TreeItemCollapsibleState.None,
                'summary',
                new vscode.ThemeIcon('stopwatch'),
                `Temps de r√©ponse maximum: ${Math.round(maxResponseTime)}ms`
            )
        );
        
        return items;
    }

    private getAlertsItems(): PerformanceItem[] {
        const latestMetrics = this.performanceMonitor.getLatestMetrics();
        const config = vscode.workspace.getConfiguration('nexa.performance');
        const memoryThreshold = config.get<number>('memoryThreshold', 128);
        const timeThreshold = config.get<number>('executionTimeThreshold', 1000);
        
        const alerts: PerformanceItem[] = [];
        
        if (!latestMetrics) {
            return [
                new PerformanceItem(
                    'Aucune donn√©e disponible',
                    vscode.TreeItemCollapsibleState.None,
                    'noData',
                    new vscode.ThemeIcon('info'),
                    'D√©marrez le monitoring pour voir les alertes'
                )
            ];
        }
        
        // Memory alerts
        if (latestMetrics.memoryUsage > memoryThreshold) {
            alerts.push(
                new PerformanceItem(
                    `‚ö†Ô∏è M√©moire √©lev√©e: ${latestMetrics.memoryUsage}MB`,
                    vscode.TreeItemCollapsibleState.None,
                    'alert',
                    new vscode.ThemeIcon('warning'),
                    `Utilisation m√©moire au-dessus du seuil (${memoryThreshold}MB)`
                )
            );
        }
        
        // Response time alerts
        if (latestMetrics.responseTime > timeThreshold) {
            alerts.push(
                new PerformanceItem(
                    `‚ö†Ô∏è Temps de r√©ponse √©lev√©: ${Math.round(latestMetrics.responseTime)}ms`,
                    vscode.TreeItemCollapsibleState.None,
                    'alert',
                    new vscode.ThemeIcon('clock'),
                    `Temps de r√©ponse au-dessus du seuil (${timeThreshold}ms)`
                )
            );
        }
        
        // Error rate alerts
        if (latestMetrics.errorRate > 5) {
            alerts.push(
                new PerformanceItem(
                    `üö® Taux d'erreur √©lev√©: ${latestMetrics.errorRate.toFixed(1)}%`,
                    vscode.TreeItemCollapsibleState.None,
                    'alert',
                    new vscode.ThemeIcon('error'),
                    `Taux d'erreur critique: ${latestMetrics.errorRate.toFixed(1)}%`
                )
            );
        }
        
        if (alerts.length === 0) {
            alerts.push(
                new PerformanceItem(
                    '‚úÖ Aucune alerte',
                    vscode.TreeItemCollapsibleState.None,
                    'noAlert',
                    new vscode.ThemeIcon('check'),
                    'Toutes les m√©triques sont dans les seuils normaux'
                )
            );
        }
        
        return alerts;
    }

    private getReportsItems(): PerformanceItem[] {
        return [
            new PerformanceItem(
                'Rapport d√©taill√©',
                vscode.TreeItemCollapsibleState.None,
                'detailedReport',
                new vscode.ThemeIcon('file-text'),
                'G√©n√©rer un rapport d√©taill√©'
            ),
            new PerformanceItem(
                'Suggestions d\'optimisation',
                vscode.TreeItemCollapsibleState.None,
                'optimizationSuggestions',
                new vscode.ThemeIcon('lightbulb'),
                'Voir les suggestions d\'am√©lioration'
            ),
            new PerformanceItem(
                'Analyser le fichier actuel',
                vscode.TreeItemCollapsibleState.None,
                'analyzeCurrentFile',
                new vscode.ThemeIcon('search'),
                'Analyser le fichier ouvert'
            ),
            new PerformanceItem(
                'Analyser le projet',
                vscode.TreeItemCollapsibleState.None,
                'analyzeProject',
                new vscode.ThemeIcon('folder'),
                'Analyser tout le projet'
            )
        ];
    }
}

export class PerformanceItem extends vscode.TreeItem {
    constructor(
        public readonly label: string,
        public readonly collapsibleState: vscode.TreeItemCollapsibleState,
        public readonly contextValue: string,
        public readonly iconPath?: vscode.ThemeIcon,
        public readonly tooltip?: string
    ) {
        super(label, collapsibleState);
        this.contextValue = contextValue;
        this.iconPath = iconPath;
        this.tooltip = tooltip;
        
        // Add commands for interactive items
        switch (contextValue) {
            case 'startMonitoring':
                this.command = {
                    command: 'nexa.performance.startMonitoring',
                    title: 'D√©marrer le monitoring'
                };
                break;
            case 'stopMonitoring':
                this.command = {
                    command: 'nexa.performance.stopMonitoring',
                    title: 'Arr√™ter le monitoring'
                };
                break;
            case 'detailedReport':
                this.command = {
                    command: 'nexa.performance.showReport',
                    title: 'Afficher le rapport'
                };
                break;
            case 'optimizationSuggestions':
                this.command = {
                    command: 'nexa.performance.optimizationSuggestions',
                    title: 'Suggestions d\'optimisation'
                };
                break;
            case 'analyzeCurrentFile':
                this.command = {
                    command: 'nexa.performance.analyzeFile',
                    title: 'Analyser le fichier'
                };
                break;
            case 'analyzeProject':
                this.command = {
                    command: 'nexa.performance.analyzeProject',
                    title: 'Analyser le projet'
                };
                break;
        }
    }
}